# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17rxcByD76pg1orpUfqJK2VS5QAzpyST4

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

for s, p, o in g:
  print(s, p, o)

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?subclase WHERE {
    ?subclase rdfs:subClassOf ns:LivingThing
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": "http://somewhere#"}
)

# Visualize the results
for r in g.query(q1):
  print(r)

for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
  SELECT ?individuo WHERE {
    {?subclase rdfs:subClassOf ns:Person .
    ?individuo rdf:type ?subclase} UNION {
      ?individuo rdf:type ns:Person
    }
  }
  ''',
  initNs = {"rdf": RDF, "rdfs": RDFS, "ns": "http://somewhere#"}
  )

# Visualize the results
for r in g.query(q2):
  print(r)

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2, p2, o2 in g.triples((None, RDF.type, s)):
    print(s2)
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?individuo WHERE {
    ?subclase rdfs:subClassOf ns:LivingThing .
    ?individuo rdf:type ?subclase .
  }
  ''',
  initNs = {"rdf": RDF, "rdfs": RDFS, "ns": "http://somewhere#"}
  )


# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
from rdflib import FOAF
q4 = prepareQuery('''
  SELECT ?individuo WHERE {
    {?subclase rdfs:subClassOf ns:Person .
    ?individuo rdf:type ?subclase} UNION
    {?individuo rdf:type ns:Person}
    ?individuo foaf:knows ns:RockySmith .
  }
  ''',
  initNs = {"foaf": FOAF, "rdf": RDF, "rdfs": RDFS, "ns": "http://somewhere#"}
  )

# Visualize the results
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = prepareQuery('''
  SELECT ?animal WHERE {
    ?animal rdf:type ns:Animal .
    ?animal_otro rdf:type ns:Animal .
    ?animal foaf:knows ?animal_otro .
  }
  ''',
  initNs = {"foaf": FOAF, "rdf": RDF, "rdfs": RDFS, "ns": "http://somewhere#"}
  )
# Visualize the results
for r in g.query(q5):
  print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery('''
  SELECT ?age WHERE {
    {
      SELECT DISTINCT ?thing WHERE {
        {
          ?subclase rdfs:subClassOf ns:LivingThing .
          ?thing rdf:type ?subclase .} UNION
        {
          ?ser rdfs:subClassOf ?subclase .
          ?thing rdf:type ?ser}
      }
    }
    ?thing foaf:age ?age
  } ORDER BY DESC(?age)
  ''',
  initNs = {"foaf": FOAF, "rdf": RDF, "rdfs": RDFS, "ns": "http://somewhere#"}
  )
# Visualize the results
for r in g.query(q6):
  print(r)